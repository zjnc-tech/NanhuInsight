/*
   SPDX-License-Identifier: Apache-2.0
   Copyright Authors of NanhuInsight
*/

// Code generated by client-gen-v0.31. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/zjnc-tech/NanhuInsight/apis/k8s/demo/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDemos implements DemoInterface
type FakeDemos struct {
	Fake *FakeDemoV1alpha1
	ns   string
}

var demosResource = v1alpha1.SchemeGroupVersion.WithResource("demos")

var demosKind = v1alpha1.SchemeGroupVersion.WithKind("Demo")

// Get takes name of the demo, and returns the corresponding demo object, and an error if there is any.
func (c *FakeDemos) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.Demo, err error) {
	emptyResult := &v1alpha1.Demo{}
	obj, err := c.Fake.
		Invokes(testing.NewGetActionWithOptions(demosResource, c.ns, name, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.Demo), err
}

// List takes label and field selectors, and returns the list of Demos that match those selectors.
func (c *FakeDemos) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.DemoList, err error) {
	emptyResult := &v1alpha1.DemoList{}
	obj, err := c.Fake.
		Invokes(testing.NewListActionWithOptions(demosResource, demosKind, c.ns, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.DemoList{ListMeta: obj.(*v1alpha1.DemoList).ListMeta}
	for _, item := range obj.(*v1alpha1.DemoList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested demos.
func (c *FakeDemos) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchActionWithOptions(demosResource, c.ns, opts))

}

// Create takes the representation of a demo and creates it.  Returns the server's representation of the demo, and an error, if there is any.
func (c *FakeDemos) Create(ctx context.Context, demo *v1alpha1.Demo, opts v1.CreateOptions) (result *v1alpha1.Demo, err error) {
	emptyResult := &v1alpha1.Demo{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateActionWithOptions(demosResource, c.ns, demo, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.Demo), err
}

// Update takes the representation of a demo and updates it. Returns the server's representation of the demo, and an error, if there is any.
func (c *FakeDemos) Update(ctx context.Context, demo *v1alpha1.Demo, opts v1.UpdateOptions) (result *v1alpha1.Demo, err error) {
	emptyResult := &v1alpha1.Demo{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateActionWithOptions(demosResource, c.ns, demo, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.Demo), err
}

// Delete takes name of the demo and deletes it. Returns an error if one occurs.
func (c *FakeDemos) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(demosResource, c.ns, name, opts), &v1alpha1.Demo{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDemos) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionActionWithOptions(demosResource, c.ns, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.DemoList{})
	return err
}

// Patch applies the patch and returns the patched demo.
func (c *FakeDemos) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.Demo, err error) {
	emptyResult := &v1alpha1.Demo{}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceActionWithOptions(demosResource, c.ns, name, pt, data, opts, subresources...), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.Demo), err
}
