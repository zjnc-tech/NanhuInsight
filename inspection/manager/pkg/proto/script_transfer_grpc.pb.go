// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: script_transfer.proto

package transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScriptTransfer_TransferScript_FullMethodName = "/script_transfer.ScriptTransfer/TransferScript"
	ScriptTransfer_Execute_FullMethodName        = "/script_transfer.ScriptTransfer/Execute"
	ScriptTransfer_GetResource_FullMethodName    = "/script_transfer.ScriptTransfer/GetResource"
)

// ScriptTransferClient is the client API for ScriptTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义服务
type ScriptTransferClient interface {
	TransferScript(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
}

type scriptTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewScriptTransferClient(cc grpc.ClientConnInterface) ScriptTransferClient {
	return &scriptTransferClient{cc}
}

func (c *scriptTransferClient) TransferScript(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, ScriptTransfer_TransferScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptTransferClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, ScriptTransfer_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptTransferClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, ScriptTransfer_GetResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScriptTransferServer is the server API for ScriptTransfer service.
// All implementations must embed UnimplementedScriptTransferServer
// for forward compatibility.
//
// 定义服务
type ScriptTransferServer interface {
	TransferScript(context.Context, *TransferRequest) (*TransferResponse, error)
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	mustEmbedUnimplementedScriptTransferServer()
}

// UnimplementedScriptTransferServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScriptTransferServer struct{}

func (UnimplementedScriptTransferServer) TransferScript(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferScript not implemented")
}
func (UnimplementedScriptTransferServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedScriptTransferServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedScriptTransferServer) mustEmbedUnimplementedScriptTransferServer() {}
func (UnimplementedScriptTransferServer) testEmbeddedByValue()                        {}

// UnsafeScriptTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScriptTransferServer will
// result in compilation errors.
type UnsafeScriptTransferServer interface {
	mustEmbedUnimplementedScriptTransferServer()
}

func RegisterScriptTransferServer(s grpc.ServiceRegistrar, srv ScriptTransferServer) {
	// If the following call pancis, it indicates UnimplementedScriptTransferServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScriptTransfer_ServiceDesc, srv)
}

func _ScriptTransfer_TransferScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptTransferServer).TransferScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScriptTransfer_TransferScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptTransferServer).TransferScript(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptTransfer_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptTransferServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScriptTransfer_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptTransferServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScriptTransfer_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScriptTransferServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScriptTransfer_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScriptTransferServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScriptTransfer_ServiceDesc is the grpc.ServiceDesc for ScriptTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScriptTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "script_transfer.ScriptTransfer",
	HandlerType: (*ScriptTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferScript",
			Handler:    _ScriptTransfer_TransferScript_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _ScriptTransfer_Execute_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ScriptTransfer_GetResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "script_transfer.proto",
}
